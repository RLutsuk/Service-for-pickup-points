// Code generated by MockGen. DO NOT EDIT.
// Source: .\repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	models "github.com/RLutsuk/Service-for-pickup-points/app/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryI is a mock of RepositoryI interface.
type MockRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryIMockRecorder
}

// MockRepositoryIMockRecorder is the mock recorder for MockRepositoryI.
type MockRepositoryIMockRecorder struct {
	mock *MockRepositoryI
}

// NewMockRepositoryI creates a new mock instance.
func NewMockRepositoryI(ctrl *gomock.Controller) *MockRepositoryI {
	mock := &MockRepositoryI{ctrl: ctrl}
	mock.recorder = &MockRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryI) EXPECT() *MockRepositoryIMockRecorder {
	return m.recorder
}

// ChekUserByEmail mocks base method.
func (m *MockRepositoryI) ChekUserByEmail(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChekUserByEmail", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChekUserByEmail indicates an expected call of ChekUserByEmail.
func (mr *MockRepositoryIMockRecorder) ChekUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChekUserByEmail", reflect.TypeOf((*MockRepositoryI)(nil).ChekUserByEmail), email)
}

// CreateUser mocks base method.
func (m *MockRepositoryI) CreateUser(user *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryIMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepositoryI)(nil).CreateUser), user)
}

// GetUserByEmail mocks base method.
func (m *MockRepositoryI) GetUserByEmail(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockRepositoryIMockRecorder) GetUserByEmail(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockRepositoryI)(nil).GetUserByEmail), user)
}

// GetUserByID mocks base method.
func (m *MockRepositoryI) GetUserByID(user *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockRepositoryIMockRecorder) GetUserByID(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockRepositoryI)(nil).GetUserByID), user)
}
