// Code generated by MockGen. DO NOT EDIT.
// Source: .\repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	models "github.com/RLutsuk/Service-for-pickup-points/app/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryI is a mock of RepositoryI interface.
type MockRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryIMockRecorder
}

// MockRepositoryIMockRecorder is the mock recorder for MockRepositoryI.
type MockRepositoryIMockRecorder struct {
	mock *MockRepositoryI
}

// NewMockRepositoryI creates a new mock instance.
func NewMockRepositoryI(ctrl *gomock.Controller) *MockRepositoryI {
	mock := &MockRepositoryI{ctrl: ctrl}
	mock.recorder = &MockRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryI) EXPECT() *MockRepositoryIMockRecorder {
	return m.recorder
}

// CreatePickupPoint mocks base method.
func (m *MockRepositoryI) CreatePickupPoint(pickupPoint *models.PickupPoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePickupPoint", pickupPoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePickupPoint indicates an expected call of CreatePickupPoint.
func (mr *MockRepositoryIMockRecorder) CreatePickupPoint(pickupPoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePickupPoint", reflect.TypeOf((*MockRepositoryI)(nil).CreatePickupPoint), pickupPoint)
}

// GetAllPickupPoint mocks base method.
func (m *MockRepositoryI) GetAllPickupPoint(startDate, endDate string, offset, limit int) ([]*models.PickupPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPickupPoint", startDate, endDate, offset, limit)
	ret0, _ := ret[0].([]*models.PickupPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPickupPoint indicates an expected call of GetAllPickupPoint.
func (mr *MockRepositoryIMockRecorder) GetAllPickupPoint(startDate, endDate, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPickupPoint", reflect.TypeOf((*MockRepositoryI)(nil).GetAllPickupPoint), startDate, endDate, offset, limit)
}

// GetListOnlyPickupPoint mocks base method.
func (m *MockRepositoryI) GetListOnlyPickupPoint() ([]*models.PickupPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListOnlyPickupPoint")
	ret0, _ := ret[0].([]*models.PickupPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListOnlyPickupPoint indicates an expected call of GetListOnlyPickupPoint.
func (mr *MockRepositoryIMockRecorder) GetListOnlyPickupPoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListOnlyPickupPoint", reflect.TypeOf((*MockRepositoryI)(nil).GetListOnlyPickupPoint))
}

// GetPickupPointByID mocks base method.
func (m *MockRepositoryI) GetPickupPointByID(pickupPointID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPickupPointByID", pickupPointID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetPickupPointByID indicates an expected call of GetPickupPointByID.
func (mr *MockRepositoryIMockRecorder) GetPickupPointByID(pickupPointID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPickupPointByID", reflect.TypeOf((*MockRepositoryI)(nil).GetPickupPointByID), pickupPointID)
}
