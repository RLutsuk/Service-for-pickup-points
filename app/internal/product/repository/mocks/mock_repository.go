// Code generated by MockGen. DO NOT EDIT.
// Source: .\repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	models "github.com/RLutsuk/Service-for-pickup-points/app/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryI is a mock of RepositoryI interface.
type MockRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryIMockRecorder
}

// MockRepositoryIMockRecorder is the mock recorder for MockRepositoryI.
type MockRepositoryIMockRecorder struct {
	mock *MockRepositoryI
}

// NewMockRepositoryI creates a new mock instance.
func NewMockRepositoryI(ctrl *gomock.Controller) *MockRepositoryI {
	mock := &MockRepositoryI{ctrl: ctrl}
	mock.recorder = &MockRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryI) EXPECT() *MockRepositoryIMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockRepositoryI) CreateProduct(product *models.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockRepositoryIMockRecorder) CreateProduct(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockRepositoryI)(nil).CreateProduct), product)
}

// DeleteLastProduct mocks base method.
func (m *MockRepositoryI) DeleteLastProduct(productID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLastProduct", productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLastProduct indicates an expected call of DeleteLastProduct.
func (mr *MockRepositoryIMockRecorder) DeleteLastProduct(productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLastProduct", reflect.TypeOf((*MockRepositoryI)(nil).DeleteLastProduct), productID)
}

// GetLastProdcutByDate mocks base method.
func (m *MockRepositoryI) GetLastProdcutByDate(receptionID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastProdcutByDate", receptionID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastProdcutByDate indicates an expected call of GetLastProdcutByDate.
func (mr *MockRepositoryIMockRecorder) GetLastProdcutByDate(receptionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastProdcutByDate", reflect.TypeOf((*MockRepositoryI)(nil).GetLastProdcutByDate), receptionID)
}
